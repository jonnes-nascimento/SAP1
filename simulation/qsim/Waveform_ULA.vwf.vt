// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/03/2022 19:52:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADD_SUB;
reg [7:0] AR;
reg [7:0] BR;
// wires                                               
wire [7:0] OUT;

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.ADD_SUB(ADD_SUB),
	.AR(AR),
	.BR(BR),
	.OUT(OUT)
);
initial 
begin 
#1000000 $finish;
end 

// ADD_SUB
initial
begin
	repeat(2)
	begin
		ADD_SUB = 1'b0;
		ADD_SUB = #200000 1'b1;
		# 200000;
	end
	ADD_SUB = 1'b0;
end 
// AR[ 7 ]
initial
begin
	AR[7] = 1'b0;
end 
// AR[ 6 ]
initial
begin
	AR[6] = 1'b0;
	AR[6] = #640000 1'b1;
end 
// AR[ 5 ]
initial
begin
	AR[5] = 1'b0;
	AR[5] = #400000 1'b1;
	AR[5] = #240000 1'b0;
	AR[5] = #320000 1'b1;
end 
// AR[ 4 ]
initial
begin
	AR[4] = 1'b0;
	AR[4] = #160000 1'b1;
	AR[4] = #40000 1'b0;
	AR[4] = #160000 1'b1;
	AR[4] = #40000 1'b0;
	AR[4] = #80000 1'b1;
	AR[4] = #160000 1'b0;
	AR[4] = #160000 1'b1;
	AR[4] = #160000 1'b0;
end 
// AR[ 3 ]
initial
begin
	AR[3] = 1'b0;
	AR[3] = #80000 1'b1;
	AR[3] = #80000 1'b0;
	AR[3] = #120000 1'b1;
	AR[3] = #80000 1'b0;
	AR[3] = #40000 1'b1;
	# 80000;
	repeat(3)
	begin
		AR[3] = 1'b0;
		AR[3] = #80000 1'b1;
		# 80000;
	end
	AR[3] = 1'b0;
end 
// AR[ 2 ]
initial
begin
	repeat(2)
	begin
		AR[2] = 1'b0;
		AR[2] = #40000 1'b1;
		# 40000;
	end
	AR[2] = 1'b0;
	AR[2] = #80000 1'b1;
	AR[2] = #40000 1'b0;
	AR[2] = #40000 1'b1;
	AR[2] = #40000 1'b0;
	AR[2] = #80000 1'b1;
	# 40000;
	repeat(6)
	begin
		AR[2] = 1'b0;
		AR[2] = #40000 1'b1;
		# 40000;
	end
	AR[2] = 1'b0;
end 
// AR[ 1 ]
initial
begin
	repeat(5)
	begin
		AR[1] = 1'b0;
		AR[1] = #20000 1'b1;
		# 20000;
	end
	repeat(5)
	begin
		AR[1] = 1'b0;
		AR[1] = #20000 1'b1;
		# 20000;
	end
	AR[1] = 1'b0;
	AR[1] = #20000 1'b1;
	# 20000;
	repeat(14)
	begin
		AR[1] = 1'b0;
		AR[1] = #20000 1'b1;
		# 20000;
	end
end 
// AR[ 0 ]
initial
begin
	repeat(10)
	begin
		AR[0] = 1'b0;
		AR[0] = #10000 1'b1;
		# 10000;
	end
	repeat(10)
	begin
		AR[0] = 1'b0;
		AR[0] = #10000 1'b1;
		# 10000;
	end
	AR[0] = 1'b0;
	AR[0] = #10000 1'b1;
	# 10000;
	repeat(29)
	begin
		AR[0] = 1'b0;
		AR[0] = #10000 1'b1;
		# 10000;
	end
end 
// BR[ 7 ]
initial
begin
	BR[7] = 1'b0;
	BR[7] = #120000 1'b1;
	BR[7] = #80000 1'b0;
	BR[7] = #120000 1'b1;
	BR[7] = #190000 1'b0;
	BR[7] = #120000 1'b1;
	BR[7] = #130000 1'b0;
	BR[7] = #130000 1'b1;
end 
// BR[ 6 ]
initial
begin
	BR[6] = 1'b0;
	BR[6] = #60000 1'b1;
	BR[6] = #60000 1'b0;
	BR[6] = #70000 1'b1;
	BR[6] = #10000 1'b0;
	BR[6] = #60000 1'b1;
	BR[6] = #60000 1'b0;
	BR[6] = #70000 1'b1;
	BR[6] = #10000 1'b0;
	BR[6] = #40000 1'b1;
	BR[6] = #70000 1'b0;
	# 60000;
	repeat(2)
	begin
		BR[6] = 1'b1;
		BR[6] = #60000 1'b0;
		# 70000;
	end
	BR[6] = 1'b1;
	BR[6] = #60000 1'b0;
	BR[6] = #60000 1'b1;
end 
// BR[ 5 ]
initial
begin
	repeat(2)
	begin
		BR[5] = 1'b0;
		BR[5] = #30000 1'b1;
		# 30000;
	end
	BR[5] = 1'b0;
	BR[5] = #30000 1'b1;
	BR[5] = #40000 1'b0;
	BR[5] = #40000 1'b1;
	BR[5] = #30000 1'b0;
	BR[5] = #30000 1'b1;
	BR[5] = #30000 1'b0;
	BR[5] = #30000 1'b1;
	BR[5] = #40000 1'b0;
	BR[5] = #20000 1'b1;
	BR[5] = #30000 1'b0;
	BR[5] = #30000 1'b1;
	# 40000;
	repeat(2)
	begin
		BR[5] = 1'b0;
		BR[5] = #30000 1'b1;
		# 30000;
	end
	BR[5] = 1'b0;
	# 40000;
	repeat(2)
	begin
		BR[5] = 1'b1;
		BR[5] = #30000 1'b0;
		# 30000;
	end
	BR[5] = 1'b1;
	# 40000;
	repeat(2)
	begin
		BR[5] = 1'b0;
		BR[5] = #30000 1'b1;
		# 30000;
	end
	BR[5] = 1'b0;
	BR[5] = #40000 1'b1;
end 
// BR[ 4 ]
initial
begin
	repeat(3)
	begin
		BR[4] = 1'b0;
		BR[4] = #10000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		BR[4] = 1'b0;
		BR[4] = #20000 1'b1;
		# 10000;
	end
	BR[4] = 1'b0;
	BR[4] = #20000 1'b1;
	BR[4] = #20000 1'b0;
	BR[4] = #20000 1'b1;
	# 20000;
	repeat(2)
	begin
		BR[4] = 1'b0;
		BR[4] = #10000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		BR[4] = 1'b0;
		BR[4] = #20000 1'b1;
		# 10000;
	end
	BR[4] = 1'b0;
	BR[4] = #20000 1'b1;
	BR[4] = #20000 1'b0;
	BR[4] = #10000 1'b1;
	BR[4] = #10000 1'b0;
	BR[4] = #20000 1'b1;
	BR[4] = #10000 1'b0;
	BR[4] = #20000 1'b1;
	BR[4] = #10000 1'b0;
	# 20000;
	repeat(2)
	begin
		BR[4] = 1'b1;
		BR[4] = #20000 1'b0;
		# 10000;
	end
	BR[4] = 1'b1;
	# 20000;
	repeat(2)
	begin
		BR[4] = 1'b0;
		BR[4] = #20000 1'b1;
		# 10000;
	end
	BR[4] = 1'b0;
	# 20000;
	repeat(2)
	begin
		BR[4] = 1'b1;
		BR[4] = #20000 1'b0;
		# 10000;
	end
	BR[4] = 1'b1;
	# 20000;
	repeat(2)
	begin
		BR[4] = 1'b0;
		BR[4] = #20000 1'b1;
		# 10000;
	end
	BR[4] = 1'b0;
	# 20000;
	repeat(2)
	begin
		BR[4] = 1'b1;
		BR[4] = #20000 1'b0;
		# 10000;
	end
	BR[4] = 1'b1;
	# 20000;
	repeat(2)
	begin
		BR[4] = 1'b0;
		BR[4] = #20000 1'b1;
		# 10000;
	end
	BR[4] = 1'b0;
	BR[4] = #20000 1'b1;
	BR[4] = #20000 1'b0;
end 
// BR[ 3 ]
initial
begin
	repeat(2)
	begin
		BR[3] = 1'b1;
		BR[3] = #10000 1'b0;
		BR[3] = #10000 1'b1;
		BR[3] = #20000 1'b0;
		BR[3] = #10000 1'b1;
		BR[3] = #10000 1'b0;
		# 20000;
	end
	BR[3] = 1'b1;
	BR[3] = #10000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #30000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #20000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #10000 1'b0;
	BR[3] = #20000 1'b1;
	BR[3] = #10000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #20000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #10000 1'b0;
	BR[3] = #20000 1'b1;
	BR[3] = #10000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #30000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #20000 1'b0;
	BR[3] = #10000 1'b1;
	BR[3] = #10000 1'b0;
	# 20000;
	repeat(6)
	begin
		BR[3] = 1'b1;
		BR[3] = #10000 1'b0;
		BR[3] = #10000 1'b1;
		BR[3] = #20000 1'b0;
		BR[3] = #10000 1'b1;
		BR[3] = #10000 1'b0;
		# 20000;
	end
	BR[3] = 1'b1;
	BR[3] = #10000 1'b0;
	BR[3] = #10000 1'b1;
end 
// BR[ 2 ]
initial
begin
	BR[2] = 1'b0;
	# 10000;
	repeat(4)
	begin
		BR[2] = 1'b1;
		BR[2] = #20000 1'b0;
		# 20000;
	end
	BR[2] = 1'b1;
	BR[2] = #20000 1'b0;
	BR[2] = #20000 1'b1;
	BR[2] = #20000 1'b0;
	# 20000;
	repeat(3)
	begin
		BR[2] = 1'b1;
		BR[2] = #20000 1'b0;
		# 20000;
	end
	BR[2] = 1'b1;
	BR[2] = #20000 1'b0;
	BR[2] = #20000 1'b1;
	BR[2] = #20000 1'b0;
	# 20000;
	repeat(13)
	begin
		BR[2] = 1'b1;
		BR[2] = #20000 1'b0;
		# 20000;
	end
	BR[2] = 1'b1;
	BR[2] = #20000 1'b0;
end 
// BR[ 1 ]
initial
begin
	repeat(10)
	begin
		BR[1] = 1'b1;
		BR[1] = #10000 1'b0;
		# 10000;
	end
	repeat(10)
	begin
		BR[1] = 1'b1;
		BR[1] = #10000 1'b0;
		# 10000;
	end
	BR[1] = 1'b1;
	BR[1] = #10000 1'b0;
	# 10000;
	repeat(29)
	begin
		BR[1] = 1'b1;
		BR[1] = #10000 1'b0;
		# 10000;
	end
end 
// BR[ 0 ]
initial
begin
	BR[0] = 1'b0;
end 
endmodule

